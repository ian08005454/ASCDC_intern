<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>中央研究院實習成果</title>
    <link>https://ian08005454.github.io/ASCDC_intern/</link>
    <description>Recent content on 中央研究院實習成果</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <copyright>Copyright &amp;copy; 2020 [中央研究院數位文化中心](https://ascdc.sinica.edu.tw/) All Rights Reserved</copyright>
    <lastBuildDate>Fri, 12 Jun 2020 08:30:30 +0800</lastBuildDate>
    
	<atom:link href="https://ian08005454.github.io/ASCDC_intern/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>1082_實習心得</title>
      <link>https://ian08005454.github.io/ASCDC_intern/blog/1082_%E6%9D%8E%E5%BD%A5%E7%91%BE%E7%9A%84%E5%AF%A6%E7%BF%92%E5%BF%83%E5%BE%97/</link>
      <pubDate>Fri, 12 Jun 2020 08:30:30 +0800</pubDate>
      
      <guid>https://ian08005454.github.io/ASCDC_intern/blog/1082_%E6%9D%8E%E5%BD%A5%E7%91%BE%E7%9A%84%E5%AF%A6%E7%BF%92%E5%BF%83%E5%BE%97/</guid>
      <description>實習心得 自我評估 由於參與的計畫還在開發中，許多需求還未明確，也無法確定當前的作法能否達到期望的效果。所以除了按照經理所說的來做，自己也可以多方研究是否有更好的方法，主管們都非常願意聆聽工讀生們的想法。
一開始不熟悉Java語法，在安裝環境的時候遇到很多問題，還好有正職的同事幫忙，給我很多參考網址讓我自己去把環境慢慢裝起來，遇到問題的時候也是很快地來幫助我。寫程式方面也受到很多指導，因為自己的邏輯並不是很好，主管和同事也會給予很多協助，會跟我說有可以哪些方法用。
在將近一學期的實習，每天都很充實，雖然我們沒有像業界公司有進度上的壓力，但是每周的報告中都希望自己能有一些成果可以呈現。過程中也發現自己有很多不足，因為我們開發的系統是半自動化的數位研究，因此方法的有效性也是持續研究。過程中經理也有給我看別人的論文，發現真的需要多方的閱讀其他人的經驗和做法之後再回頭來實作會更踏實，否則很容易做出不實用的系統。
疫情期間我們在家工作了一個月，覺得工作效率提高，但是和團隊討論的機會變少，加上有兩天在上課的關係，有時會無法了解當前的需求和進度。因此，覺得在家工作很棒，但還是需要不時關注團隊的進度。
心得感想 覺得中研院數位文化中心有非常自由的工作環境，也有滿有趣、具挑戰性的專案讓工讀生來做。一開始主管會問我們想要做哪方面的領域，有機器學習、自然語言處理、影像分析、視覺化呈現&amp;hellip;等。剛開始工作交接的時候主管會給我們學習的時間，也會給我們題目和資料去練習，如果遇到問題也有許多學長姊、正職和主管可以詢問，大家都會很積極地幫助我們。感謝系上為我們安排一年的實習，也很感謝中研院給予我們學習的機會。
對系上的建議 感謝系上為我們媒合實習公司，大學當中有一年的實習機會真的很好。覺得對於大三的學生，除非有自己很想要研習的領域，否則不論到哪裡實習都差不多，同樣可以學習到學校所學不到的東西。唯一覺得稍微不足的部分，在實習中會發現學校所學的是比較基礎的概念，沒有理解到所學的語言更核心的特性和架構，以及除了邏輯之外在實務上會如何來使用。學校的微型課程或系上的工作坊是很好的方式，可以引入業師開設短期實作課程，讓同學們有多種選擇也能吸收最新的市場技術。</description>
    </item>
    
    <item>
      <title>Hugo 學習筆記(三) - host on github</title>
      <link>https://ian08005454.github.io/ASCDC_intern/blog/hugo-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-3/</link>
      <pubDate>Thu, 11 Jun 2020 15:30:30 +0800</pubDate>
      
      <guid>https://ian08005454.github.io/ASCDC_intern/blog/hugo-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-3/</guid>
      <description>當網頁都完成後就必須找台server host 上去，這裡樣補充的使用是github page。 以下是git上去專案網站的語法，需要把網址改成自己的，且cd到工作目錄:
# remove, public folder will created later RD /S public $ git add . git commit -m &amp;#39;hugo project init&amp;#39; # push git push -u origin master # Create a new orphand branch (no commit history) named gh-pages git checkout --orphan gh-pages # Unstage all files # -rf themes/hyde git reset # Add and commit that file git add .</description>
    </item>
    
    <item>
      <title>使用到的平台與開發環境</title>
      <link>https://ian08005454.github.io/ASCDC_intern/blog/%E4%BD%BF%E7%94%A8%E5%88%B0%E7%9A%84%E5%B9%B3%E5%8F%B0%E8%88%87%E9%96%8B%E7%99%BC%E7%92%B0%E5%A2%83/</link>
      <pubDate>Thu, 11 Jun 2020 09:50:30 +0800</pubDate>
      
      <guid>https://ian08005454.github.io/ASCDC_intern/blog/%E4%BD%BF%E7%94%A8%E5%88%B0%E7%9A%84%E5%B9%B3%E5%8F%B0%E8%88%87%E9%96%8B%E7%99%BC%E7%92%B0%E5%A2%83/</guid>
      <description>Solr Figure 1. Aapche Solr Solr是一個企業級搜尋引擎，底層使用Apache Luence開發。Solr是一個NoSQL的技術，在資料儲存的時候，不需要馬上就設計出符合所有情形的框架。Solr有彈性的綱目設計(Flexible schema)，因此每一筆資料不一定有相同的屬性，有需要的時候再添加欄位就可以了。
Solr有全文檢索功能，設定好資料欄位的型態(Field-Type)之後，Solr會自動建立索引，以後就可以下查詢語法快速取得必要的資料。
實作方面，學習到使用Java控制Solr進行CRUD。
Tomcat Figure 2. Tomca Tomcat是一個Servlet容器，可以把HTML的東西轉換成Java物件，傳送請求到後端，再傳送回應給前端使用者。
Intellij Figure 3. intellij 工作中使用到Java語言，因此選擇評價很好的Java整合式開發環境Intellij。Intellij的優點在於整合了Java開發會用到的工具，運行的速度快。也有許多貼心的提示和修正建議，很容易就上手。</description>
    </item>
    
    <item>
      <title>斷詞系統學習筆記</title>
      <link>https://ian08005454.github.io/ASCDC_intern/blog/%E6%96%B7%E8%A9%9E%E7%B3%BB%E7%B5%B1%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/</link>
      <pubDate>Thu, 11 Jun 2020 09:50:30 +0800</pubDate>
      
      <guid>https://ian08005454.github.io/ASCDC_intern/blog/%E6%96%B7%E8%A9%9E%E7%B3%BB%E7%B5%B1%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/</guid>
      <description>實習期間參與到的是與自然語言處理(NLP)有關的專案。因一開始的時候先學習使用三個的斷詞引擎，分別為CKIP、Jieba、Stanford。
CKIP CKIP是中研院資訊所開發的斷詞引擎，是第一個具備未知詞偵測與句法詞類預測能力的中文分詞系統。在繁體中文斷詞具有主導地位。
Figure 1. CKIP斷詞結果 Jieba Jieba也是一個開源的斷詞系統，其原始碼可以在GitHub找到。Jieba的優點是速度快，並且替換字典檔容易。不過字典檔對於Jieba就顯得更為重要，如果遇到沒有在字典檔中的詞，斷詞結果就不會有詞性標註。
下圖紅色框框是詞性標註的欄位
Figure 2. Jieba斷詞結果 Stanford Stanford對於中英文斷詞有各自的套件可以下載。練習的時候是針對英文文本斷詞。英文斷詞相對中文來說較為單純，比較不會有歧異字的問題，所以斷詞的結果也比較精確。
Figure 3. Stanford斷詞結果 參考資料  https://ckip.iis.sinica.edu.tw/demo/ https://github.</description>
    </item>
    
    <item>
      <title>Hugo 學習筆記(二) - Markdown文章</title>
      <link>https://ian08005454.github.io/ASCDC_intern/blog/hugo-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-2/</link>
      <pubDate>Tue, 09 Jun 2020 21:42:30 +0800</pubDate>
      
      <guid>https://ian08005454.github.io/ASCDC_intern/blog/hugo-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-2/</guid>
      <description>上一篇把hugo安裝完後，要來說說在hugo編輯markdown語法的注意事項，還有常用語法。
還沒看得往這走:Hugo 學習筆記-1
常用markdown語法 常用的語法可以參考HackMD、3分鐘學會Markdown常用語法、Markdown文件。
注意事項 但在看這些文章前要注意一些事情，hugo與一般Markdown語法有點不同
Picture 1. Markdown Table由於 Markdown 語法的加入圖片不能調整大小，因此建議使用HTML語法。
如何使用及加入 Shortcodes: 如果只是要使用HTML的語法則可以參考Simple Shortcode to Insert Raw HTML in Hugo這篇的作法。</description>
    </item>
    
    <item>
      <title>Hugo 學習筆記(一) - 安裝</title>
      <link>https://ian08005454.github.io/ASCDC_intern/blog/hugo-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-1/</link>
      <pubDate>Sun, 07 Jun 2020 15:33:30 +0800</pubDate>
      
      <guid>https://ian08005454.github.io/ASCDC_intern/blog/hugo-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-1/</guid>
      <description>軟體介紹: 為了作實習的網頁，去研究了一下有沒有辦法有效率的製作靜態網頁，就找到了這套工具，它的原理比較像是運用將go語言寫入html來控制變化和做到快速產生網頁的功能，缺點是必須要依靠是特殊的範本，或自己設計一個通用的範本，有時一些網站上的範本可能會遇到一些奇怪的bug，通常只要把原來的範例素材放進去就有解了，但這件事完全沒提到過。
以下實作環境為windows 因相關資源稀少，特別留下紀錄  hugo principle   --Picture 1. hugo principlehugo缺點:  當要改他們提供的主題其實會遇到很多問題。 主題能提供的相關文件常常不足。 說明文件量太多，但使用者偏少，又以英文居多，其實要完全了解這套軟體是有門檻。 有時會遇到奇怪的bug。  hugo優點:  Markdown的編輯功能非常方便，要更改圖片也非常方便 很多重複的部分都會自動處理好，還會自動產生必須的網頁出來 如果熟悉後網頁能快速方便的產生出來  使用方式: 前置動作 先去Hugo Releases抓後面為Windows-64bit.</description>
    </item>
    
    <item>
      <title>引導查詢</title>
      <link>https://ian08005454.github.io/ASCDC_intern/project/%E5%BC%95%E5%B0%8E%E6%9F%A5%E8%A9%A2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ian08005454.github.io/ASCDC_intern/project/%E5%BC%95%E5%B0%8E%E6%9F%A5%E8%A9%A2/</guid>
      <description>數位人文平台-引導查詢功能 功能介紹 由於一本文本動輒上萬字，研究者研究一個主題通常又需要閱讀多個文本，花費很多時間和精力。因此，數位人文(Digital Humanity)應運而生。數位人文是運用資訊系統來協助人文研究，提升研究者的質研究質量。廣義的數位人文則可以將資訊系統應用在教學、出版等領域。
開始前的學習 引導查詢功能是數位人文其中一項方法。首先，主管先讓我看台灣大學數位人文研究中心發表的一篇論文-「簡化的詞夾子方法」。內容提到如何使用簡化的詞夾子來幫助研究者擷取出他們認為有意義的詞彙。有趣的是，對於不同研究領域，研究者認為有意義的詞彙也不同。簡化的詞夾子方法捨棄機器學習，要求使用者在擷取過程中提供選擇。因此這個方法被歸屬於半自動的演算法。
詞夾子的擷取成效，取決於文字在文本中的擷取成效，也就是「同位語」的結構。例如某一文本可能很常出現「宰相&amp;hellip;等人」這樣的句子結構，也就是詞夾，所以很容易就會在「宰相」和在「等人」之間擷取出人名。但是對於其他文本，「宰相&amp;hellip;等人」就不會是有效的詞夾。
簡化的詞夾子方法，需要使用者提供兩個詞夾子，分別作為「左詞夾」和「右詞夾」，然後系統會找出左詞夾左邊m個詞、右詞夾右邊n個詞。詞夾子公式定義如下:
 f0(τ,L,R,m,n) = { t: L * t * R ∈ τ, m ≤ |t| ≤ n}</description>
    </item>
    
    <item>
      <title>數位人文平台 - 社群網路分析</title>
      <link>https://ian08005454.github.io/ASCDC_intern/project/forcelayout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ian08005454.github.io/ASCDC_intern/project/forcelayout/</guid>
      <description>社群網路分析視覺化 主要功能是協助中研院內的研究者在研究時能更清楚的察看人物之間的關係遠近，方便研究者進行研究。當時接手的時候已經完成了基本的功能。
搜尋功能只做了:
 單一搜尋 兩個搜尋不能刪除 算出兩點之間路徑的功能(and搜尋)還有問題
-&amp;gt; 然而卻佔據了大半程式碼。  加入的功能  以HSL色域進行產生亂數的顏色
-&amp;gt; 可以達到120~180個絕對不重複且可分辨的顏色了   原理:
HSL顏色規範是把顏色空間定義為一個圓柱體，那只要是在360度中不要太接近就不太會一樣，如果每種顏色差6度就有60個不會重複的顏色。如果切2層或3層就可以達到120~180個絕對不重複的顏色了。
 HSL色彩空間定義 重作一般和or搜尋</description>
    </item>
    
    <item>
      <title>李彥瑾</title>
      <link>https://ian08005454.github.io/ASCDC_intern/author/%E6%9D%8E%E5%BD%A5%E7%91%BE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ian08005454.github.io/ASCDC_intern/author/%E6%9D%8E%E5%BD%A5%E7%91%BE/</guid>
      <description>現在於中研院的數位文化中心擔任實習生，主要負責後端程式設計的工作。</description>
    </item>
    
    <item>
      <title>李韋杰</title>
      <link>https://ian08005454.github.io/ASCDC_intern/author/%E6%9D%8E%E9%9F%8B%E6%9D%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ian08005454.github.io/ASCDC_intern/author/%E6%9D%8E%E9%9F%8B%E6%9D%B0/</guid>
      <description>現在於中研院的數位文化中心擔任實習生，主要負責的工作前端的視覺化與搜尋功能</description>
    </item>
    
    <item>
      <title>間距查詢</title>
      <link>https://ian08005454.github.io/ASCDC_intern/project/%E9%96%93%E8%B7%9D%E6%9F%A5%E8%A9%A2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ian08005454.github.io/ASCDC_intern/project/%E9%96%93%E8%B7%9D%E6%9F%A5%E8%A9%A2/</guid>
      <description>數位人文平台-間距查詢功能 功能介紹 間距查詢是接續引導查詢功能，同時也是詞夾子擷取方法(可以參閱引導查詢有關詞夾子的介紹)的實作。間距查詢讓使用者輸入一組查詢詞，可能是文本中很常出現的句子結構，或者是文本中兩個經常出現的人名，系統就會幫忙找出與兩個查詢詞同時出現在文本中的其他詞。
我的部分 在實習中參與開發新版的間距查詢，相較舊版多了詞性標註和斷詞功能使用者除了可以依照查詢詞組合找到其他的相關詞和詞頻，也可以純粹用詞性或是用詞搭配詞性來查找。
舊版間距查詢 下圖是舊版的間距查詢，使用者可以輸入查兩個查詢詞(或稱詞夾)，然後勾選想要尋找前綴(第1夾)、中間(第2夾)、後綴(第3夾)分別要多少詞作統計，選擇完畢後按下查詢。
Figure 1. 舊版間距查詢-使用者輸入介面 舊版的間距查詢就會依照使用者輸入的查詢詞、夾數，統計出結果來。結果包含找到的詞和該詞出現的頻率。
Figure 1. 舊版間距查詢-查詢結果 新版間距查詢 新版的間距查詢增加的功能有:
 讓使用者輸入兩個以上的查詢詞 多了詞性的搭配 一個查詢詞中可以包含多個詞，如圖中的第 2 查詢詞。  請參考 Figure 2.</description>
    </item>
    
  </channel>
</rss>